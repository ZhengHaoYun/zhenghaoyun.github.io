<!DOCTYPE html>
<html lang="zh-Hans">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <meta name="keywords" content="博客,编程,代码,Java,空间,记录">
    <meta name="description" content="郑皓云的个人博客,博客,编程,代码,Java,空间,记录">
    <meta name="author" content="Hoven">
    
    <title>
        
            Docker一探究竟 |
        
        好运的云
    </title>
    
<link rel="stylesheet" href="/css/style.css">

    <link rel="shortcut icon" href="/images/favicon.png">
    
<link rel="stylesheet" href="/css/font-awesome.min.css">

    <script id="hexo-configurations">
    let KEEP = window.KEEP || {};
    KEEP.hexo_config = {"hostname":"zhenghaoyun.cn","root":"/","language":"zh-Hans","path":"search.json"};
    KEEP.theme_config = {"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true},"style":{"primary_color":"#0066CC","avatar":"/images/avatar.png","favicon":"/images/favicon.png","article_img_align":"center","left_side_width":"260px","content_max_width":"920px","hover":{"shadow":false,"scale":false},"first_screen":{"enable":false,"background_img":"/images/bg.svg","description":"Keep writing and Keep loving."},"scroll":{"progress_bar":{"enable":true},"percent":{"enable":false}}},"local_search":{"enable":true,"preload":true},"code_copy":{"enable":true,"style":"default"},"pjax":{"enable":false},"lazyload":{"enable":false},"version":"3.4.2"};
    KEEP.language_ago = {"second":"%s seconds ago","minute":"%s minutes ago","hour":"%s hours ago","day":"%s days ago","week":"%s weeks ago","month":"%s months ago","year":"%s years ago"};
  </script>
<meta name="generator" content="Hexo 5.4.0"></head>


<body>
<div class="progress-bar-container">
    
        <span class="scroll-progress-bar"></span>
    

    
</div>


<main class="page-container">

    

    <div class="page-main-content">

        <div class="page-main-content-top">
            <header class="header-wrapper">

    <div class="header-content">
        <div class="left">
            <a class="logo-title" href="/">
                好运的云
            </a>
        </div>

        <div class="right">
            <div class="pc">
                <ul class="menu-list">
                    
                        <li class="menu-item">
                            <a class=""
                               href="/"
                            >
                                首页
                            </a>
                        </li>
                    
                        <li class="menu-item">
                            <a class=""
                               href="/archives"
                            >
                                归档
                            </a>
                        </li>
                    
                        <li class="menu-item">
                            <a class=""
                               href="/categories"
                            >
                                分类
                            </a>
                        </li>
                    
                        <li class="menu-item">
                            <a class=""
                               href="/tags"
                            >
                                标签
                            </a>
                        </li>
                    
                        <li class="menu-item">
                            <a class=""
                               href="/about"
                            >
                                关于
                            </a>
                        </li>
                    
                    
                        <li class="menu-item search search-popup-trigger">
                            <i class="fas fa-search"></i>
                        </li>
                    
                </ul>
            </div>
            <div class="mobile">
                
                    <div class="icon-item search search-popup-trigger"><i class="fas fa-search"></i></div>
                
                <div class="icon-item menu-bar">
                    <div class="menu-bar-middle"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="header-drawer">
        <ul class="drawer-menu-list">
            
                <li class="drawer-menu-item flex-center">
                    <a class=""
                       href="/">首页</a>
                </li>
            
                <li class="drawer-menu-item flex-center">
                    <a class=""
                       href="/archives">归档</a>
                </li>
            
                <li class="drawer-menu-item flex-center">
                    <a class=""
                       href="/categories">分类</a>
                </li>
            
                <li class="drawer-menu-item flex-center">
                    <a class=""
                       href="/tags">标签</a>
                </li>
            
                <li class="drawer-menu-item flex-center">
                    <a class=""
                       href="/about">关于</a>
                </li>
            
        </ul>
    </div>

    <div class="window-mask"></div>

</header>


        </div>

        <div class="page-main-content-middle">

            <div class="main-content">

                
                    <div class="fade-in-down-animation">
    <div class="article-content-container">

        <div class="article-title">
            <span class="title-hover-animation">Docker一探究竟</span>
        </div>

        
            <div class="article-header">
                <div class="avatar">
                    <img src="/images/avatar.png">
                </div>
                <div class="info">
                    <div class="author">
                        <span class="name">Hoven</span>
                        
                    </div>
                    <div class="meta-info">
                        <div class="article-meta-info">
    <span class="article-date article-meta-item">
        <i class="fas fa-edit"></i>&nbsp;2020-05-30 11:55:20
    </span>
    
        <span class="article-categories article-meta-item">
            <i class="fas fa-folder"></i>&nbsp;
            <ul>
                
                    <li>
                        <a href="/categories/Docker/">Docker</a>&nbsp;
                    </li>
                
            </ul>
        </span>
    
    
        <span class="article-tags article-meta-item">
            <i class="fas fa-tags"></i>&nbsp;
            <ul>
                
                    <li>
                        <a href="/tags/Docker/">Docker</a>&nbsp;
                    </li>
                
            </ul>
        </span>
    

    
    
    
    
</div>

                    </div>
                </div>
            </div>
        

        <div class="article-content markdown-body">
            <p>本篇是Docker学习笔记，基本上深入了解了Docker！</p>
<span id="more"></span>

<h1 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h1><h2 id="Docker为什么会出现"><a href="#Docker为什么会出现" class="headerlink" title="Docker为什么会出现?"></a>Docker为什么会出现?</h2><p>如何让你的项目带上环境在别人的电脑上也能运行？</p>
<p>如何避免超级麻烦的各种环境的配置？</p>
<p>如何跨平台开发？</p>
<p>Docker的出现解决了以上难题！</p>
<p><strong>实现步骤：</strong></p>
<ol>
<li>本地开发项目</li>
<li>打包项目带上环境（镜像）</li>
<li>发布到Docker仓库：商店</li>
<li>别人下载我们发布的镜像</li>
<li>直接运行即可</li>
</ol>
<p><strong>Docker的思想</strong>：</p>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120116.png" alt="image-20200706120115805"></p>
<p>Docker的图标是一个鲸鱼上面有很多集装箱，所以Docker的思想来源于集装箱。</p>
<p><strong>隔离</strong>：打包装箱，每个箱子是互相隔离的。（不用担心端口冲突环境冲突等！）</p>
<p>Docker通过隔离机制，将服务器利用到机制。</p>
<p><strong>Docker网址：</strong></p>
<p><a class="link"   target="_blank" rel="noopener" href="https://docs.docker.com/" >Docker官方文档<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   target="_blank" rel="noopener" href="https://www.docker.com/" >Docker官网<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="Docker历史"><a href="#Docker历史" class="headerlink" title="Docker历史"></a>Docker历史</h2><p>未记录</p>
<h2 id="Docker能干嘛"><a href="#Docker能干嘛" class="headerlink" title="Docker能干嘛"></a>Docker能干嘛</h2><h3 id="容器化技术"><a href="#容器化技术" class="headerlink" title="容器化技术"></a>容器化技术</h3><ol>
<li>容器内的应用直接运行在宿主机的内核上，容器是没有自己的内核的，也没有虚拟我们的硬件，所以就轻便了。</li>
<li>每个容器间是相互隔离的，每个容器内部都有一个属于自己的文件系统，互不影响。</li>
</ol>
<h3 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h3><p>DevOps即开发与运维</p>
<p>DevOps有以下特点：</p>
<p><strong>1. 应用更快速的交付和部署</strong></p>
<p>传统：一堆帮助文档，安装程序。</p>
<p>Docker：打包镜像发布测试，一键运行。</p>
<p><strong>2. 更便捷的升级和扩缩容</strong></p>
<p>使用了Docker之后，我们部署应用就和搭积木一样。</p>
<p>如果我们将一个项目打包为一个镜像，比如说服务器A上的项目出现问题了，我们可以在服务器上B直接运行镜像，进行水平扩展。</p>
<p><strong>3. 更简单的系统运维系统</strong></p>
<p>在容器化之后，我们的开发，测试环境都是高度一致的。</p>
<p>不会出现在我的电脑上能跑，在你的电脑上就不能用了的问题。</p>
<p><strong>4. 更高效的计算资源利用</strong></p>
<p>使用Docker可以实现1核2g的服务器 ，可以同时运行几十个tomcat！！</p>
<p>Docker是内核级别的虚拟化，可以在一个物理机上运行很多的容器实例。</p>
<p>服务器的性能可以被发挥到极致！</p>
<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200622121649.png" alt="image-20200622121648799"></p>
<h4 id="镜像-image"><a href="#镜像-image" class="headerlink" title="镜像(image):"></a>镜像(image):</h4><p>docker镜像就好比是一个模板，可以通过这个模板来创建容器服务。</p>
<p>比如：</p>
<p>tomcat镜像–&gt;run—&gt;tomcat01容器(提供服务器)</p>
<p>通过这个镜像可以创建多个容器(最终服务运行或者项目运行就是在容器中的)。</p>
<h4 id="容器-container"><a href="#容器-container" class="headerlink" title="容器(container):"></a>容器(container):</h4><p>Docker利用容器技术，独立运行一个或者一个组应用 ，通过镜像来创建容易。</p>
<p>容器基本命令包括：启动，停止，删除。<br>目前就可以把这个容器理解为就是一个简易的linux系统。</p>
<h4 id="仓库-repository"><a href="#仓库-repository" class="headerlink" title="仓库(repository):"></a>仓库(repository):</h4><p>仓库就是存放镜像的地方，仓库分为公有仓库和私有仓库。</p>
<ol>
<li><p>Docker Hub(默认是国外的)</p>
</li>
<li><p>像阿里云之类的大型企业都有容器服务器(配置镜像加速)</p>
</li>
</ol>
<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><h3 id="环境查看"><a href="#环境查看" class="headerlink" title="环境查看"></a>环境查看</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@zhenghaoyun ~]$ uname -r 	#查看内核版本</span><br><span class="line">3.10.0-1062.18.1.el7.x86_64</span><br><span class="line">[root@zhenghaoyun ~]$ cat /etc/os-release </span><br><span class="line">NAME=&quot;CentOS Linux&quot;</span><br><span class="line">VERSION=&quot;7 (Core)&quot;</span><br><span class="line">ID=&quot;centos&quot;</span><br><span class="line">ID_LIKE=&quot;rhel fedora&quot;</span><br><span class="line">VERSION_ID=&quot;7&quot;</span><br><span class="line">PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;</span><br><span class="line">ANSI_COLOR=&quot;0;31&quot;</span><br><span class="line">CPE_NAME=&quot;cpe:/o:centos:centos:7&quot;</span><br><span class="line">HOME_URL=&quot;https://www.centos.org/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;</span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=&quot;CentOS-7&quot;</span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=&quot;7&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT=&quot;centos&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=&quot;7&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>可以查看<a class="link"   target="_blank" rel="noopener" href="https://docs.docker.com/engine/install/centos/" >帮助文档<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.卸载旧版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum remove docker \</span></span><br><span class="line"><span class="bash">                  docker-client \</span></span><br><span class="line"><span class="bash">                  docker-client-latest \</span></span><br><span class="line"><span class="bash">                  docker-common \</span></span><br><span class="line"><span class="bash">                  docker-latest \</span></span><br><span class="line"><span class="bash">                  docker-latest-logrotate \</span></span><br><span class="line"><span class="bash">                  docker-logrotate \</span></span><br><span class="line"><span class="bash">                  docker-engine</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.需要的安装包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install -y yum-utils</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.设置镜像仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum-config-manager \</span></span><br><span class="line"><span class="bash">    --add-repo \</span></span><br><span class="line"><span class="bash">    https://download.docker.com/linux/centos/docker-ce.repo		<span class="comment"># 默认是国外的!很慢!</span></span></span><br><span class="line">    </span><br><span class="line"><span class="meta">$</span><span class="bash"> yum-config-manager \</span></span><br><span class="line"><span class="bash">    --add-repo \</span></span><br><span class="line"><span class="bash">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <span class="comment"># 阿里云镜像 快</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新yum软件包索引</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum makecache fast</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.安装docker	docker-ce 社区版 ee 企业版</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install docker-ce docker-ce-cli containerd.io</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.启动docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl start docker</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6.使用docker version查看是否安装成功</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker version</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7.使用hello owrld测试</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run hello-world</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断images是否下载成功，可以看到hello-world镜像。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br></pre></td></tr></table></figure>

<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 卸载依赖</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum remove docker-ce docker-ce-cli containerd.io</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除资源</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rm -rf /var/lib/docker</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /var/lib/docker docker的默认工作路径</span></span><br></pre></td></tr></table></figure>

<h2 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h2><p>登录阿里云找到容器服务</p>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120130.png" alt="image-20200622121734748"></p>
<p>配置使用</p>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200530235624.png" alt="image-20200526121645455"></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://owqdaahd.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h2 id="Docker-run流程"><a href="#Docker-run流程" class="headerlink" title="Docker run流程"></a>Docker run流程</h2><p>run的流程图</p>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200622122233.png" alt="image-20200622122233453"></p>
<h1 id="Docker底层原理"><a href="#Docker底层原理" class="headerlink" title="Docker底层原理"></a>Docker底层原理</h1><p>Docker是一个Client -Server结构的系统，Docker的守护进程运行在主机上。通过Socket从客户端访问！</p>
<p>DockerServer接收到DockerClient的信息，就会执行这条命令。</p>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120201.png" alt="image-20200706120201339"></p>
<p><strong>Docker为什么比VM块？</strong></p>
<ol>
<li>Docker有比虚拟机更少的抽象层</li>
<li>Docker利用的是宿主机的内核，vm是需要Guest OS（需要再搭建一个环境）</li>
</ol>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200622122256.png" alt="image-20200622122255917"></p>
<p>所以说，新建一个容器的时候，docker不需要像虚拟机一样重新加载一个操作系统内核，避免了引导过程，虚拟机是加载Guest OS，是分钟级别的。而Docker是利用宿主机的操作系统，省略了这个复杂的过程，是秒级的！</p>
<h1 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version # 显示docker版本信息</span><br><span class="line">docker info    # 显示docker的的系统信息，包括镜像和容器的数量</span><br><span class="line">docker 命令 --help # 帮助命令</span><br></pre></td></tr></table></figure>

<p>不会的时候就查<a class="link"   target="_blank" rel="noopener" href="https://docs.docker.com/reference/" >帮助文档地址<i class="fas fa-external-link-alt"></i></a>吧！</p>
<h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h3 id="docker-images查看本机所有镜像"><a href="#docker-images查看本机所有镜像" class="headerlink" title="docker images查看本机所有镜像"></a>docker images查看本机所有镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@zhenghaoyun ~]$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        4 months ago        13.3kB</span><br></pre></td></tr></table></figure>

<p><strong>名词解释：</strong></p>
<ul>
<li>REPOSITORY  镜像的仓库源</li>
<li>TAG            镜像的标签</li>
<li>IMAGE ID    镜像的id</li>
<li>CREATED        镜像的创建时间</li>
<li>SIZE        镜像的大小</li>
</ul>
<p><strong>参数解释：</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-a，  --all		# 列出所有镜像</span><br><span class="line">-q，  --quiet	# 列出所有镜像id，一般-ap连用</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@zhenghaoyun ~]$ docker images -a</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        4 months ago        13.3kB</span><br><span class="line">[root@zhenghaoyun ~]$ docker images -aq</span><br><span class="line">bf756fb1ae65</span><br></pre></td></tr></table></figure>

<h3 id="docker-search搜索镜像"><a href="#docker-search搜索镜像" class="headerlink" title="docker search搜索镜像"></a>docker search搜索镜像</h3><p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120239.png" alt="image-20200706120239505"></p>
<p><strong>可选项：通过**过滤</strong></p>
<p>例：<code>docker search mysql --filter=stars=3000</code>搜索出来的镜像就是STARS大于3000的 </p>
<h3 id="docker-pull下载镜像"><a href="#docker-pull下载镜像" class="headerlink" title="docker pull下载镜像"></a><strong>docker pull下载镜像</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line">[root@zhenghaoyun ~]$ docker pull mysql</span><br><span class="line">Using default tag: latest	# 如果不写[tag]默认就是latest</span><br><span class="line">latest: Pulling from library/mysql	# 分层下载. docker image核心 联合文件系统</span><br><span class="line">5b54d594fba7: Pull complete </span><br><span class="line">07e7d6a8a868: Pull complete </span><br><span class="line">abd946892310: Pull complete </span><br><span class="line">dd8f4d07efa5: Pull complete </span><br><span class="line">076d396a6205: Pull complete </span><br><span class="line">cf6b2b93048f: Pull complete </span><br><span class="line">530904b4a8b7: Pull complete </span><br><span class="line">fb1e55059a95: Pull complete </span><br><span class="line">4bd29a0dcde8: Pull complete </span><br><span class="line">b94a001c6ec7: Pull complete </span><br><span class="line">cb77cbeb422b: Pull complete </span><br><span class="line">2a35cdbd42cc: Pull complete </span><br><span class="line">Digest: sha256:dc255ca50a42b3589197000b1f9bab2b4e010158d1a9f56c3db6ee145506f625 # 签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest	</span><br><span class="line">docker.io/library/mysql:latest 	# 真实地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 等价</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定版本下载</span></span><br><span class="line">[root@zhenghaoyun ~]$ docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">5b54d594fba7: Already exists 	# 联合文件系统特性，已存在的直接复用 Already exists表示已经存在</span><br><span class="line">07e7d6a8a868: Already exists </span><br><span class="line">abd946892310: Already exists </span><br><span class="line">dd8f4d07efa5: Already exists </span><br><span class="line">076d396a6205: Already exists </span><br><span class="line">cf6b2b93048f: Already exists </span><br><span class="line">530904b4a8b7: Already exists </span><br><span class="line">a37958cbebcf: Pull complete </span><br><span class="line">04960017f638: Pull complete </span><br><span class="line">e1285def0d2a: Pull complete </span><br><span class="line">670cb3a9678e: Pull complete </span><br><span class="line">Digest: sha256:e4d39b85118358ffef6adc5e8c7d00e49d20b25597e6ffdc994696f10e3dc8e2</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure>

<h3 id="docker-rmi删除镜像"><a href="#docker-rmi删除镜像" class="headerlink" title="docker rmi删除镜像"></a>docker rmi删除镜像</h3><p>rmi中的i代表images</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@zhenghaoyun ~]$ docker rmi -f 镜像id  # 删除指定的镜像</span><br><span class="line">[root@zhenghaoyun ~]$ docker rmi -f 镜像id 镜像id 镜像id 	# 删除多个容器</span><br><span class="line">[root@zhenghaoyun ~]$ docker rmi -f $(docker images -aq)  # 删除全部镜像</span><br></pre></td></tr></table></figure>

<p><code>$()</code>中可以写命令，<code>docker images -aq</code>是查出所有镜像的id，<code>$(docker images -aq)</code>就可以得到所有id并作为<code>docker rmi -f</code>命令要删除的对象。</p>
<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p>有了镜像后，通过镜像可以创建容器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos #下载一个centos镜像</span><br></pre></td></tr></table></figure>

<h3 id="docker-run新建容器并启动"><a href="#docker-run新建容器并启动" class="headerlink" title="docker run新建容器并启动"></a>docker run新建容器并启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数说明</span></span><br><span class="line">--name=&quot;Name&quot; 	容器名字 tomcat01 tomcat02 用来区分容器</span><br><span class="line">-d				后台方式运行(nohup)</span><br><span class="line">-it				使用交互方式运行，进入容器查看内容</span><br><span class="line">-p				指定容器的端口  -p 8080:8080</span><br><span class="line">	-p ip:主机端口:容器端口</span><br><span class="line">	-p 主机端口:容器端口 (常用)</span><br><span class="line">	-p 容器端口</span><br><span class="line">	容器端口</span><br><span class="line">-P				随机指定端口</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@zhenghaoyun ~]$ docker run -it centos /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash">进入容器</span></span><br><span class="line">[root@2c235d59bdbb /]# ls</span><br><span class="line">bin  etc   lib	  lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line"><span class="meta">#</span><span class="bash">从容器中退回主机</span></span><br><span class="line">[root@2c235d59bdbb /]# exit</span><br><span class="line">exit</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到进入了centos容器</p>
<h3 id="docker-ps列出所有运行的容器"><a href="#docker-ps列出所有运行的容器" class="headerlink" title="docker ps列出所有运行的容器"></a>docker ps列出所有运行的容器</h3><p>docker ps</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps	# 列出当前正在运行的容器</span><br><span class="line">-a	# 列出当前正在运行的容器+历史运行过的容器</span><br><span class="line">-n&#x3D;? # 显示最近创建的容器</span><br><span class="line">-q	# 只显示容器的编号</span><br></pre></td></tr></table></figure>

<h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit 	# 直接停止容器并退出</span><br><span class="line">Ctrl + p + q # 容器不停止退出</span><br></pre></td></tr></table></figure>

<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id  				# 删除指定的容器，不能删除正在运行的容器</span><br><span class="line">docker rm -f 容器id			    # 强制删除容器</span><br><span class="line">docker rm -f $(docker ps -aq)	 # 递归删除所有的容器</span><br><span class="line">docker ps -aq|xargs docker rm 	 # 通过管道命令删除所有的容器</span><br></pre></td></tr></table></figure>

<h3 id="启动容器和停止容器"><a href="#启动容器和停止容器" class="headerlink" title="启动容器和停止容器"></a>启动容器和停止容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id		# 启动容器</span><br><span class="line">docker restart 容器id		# 重启容器</span><br><span class="line">docker stop 容器id		# 停止容器</span><br><span class="line">docker kill 容器id		# 强制停止容器</span><br><span class="line">docker run -d 镜像名	   # 后台启动</span><br></pre></td></tr></table></figure>

<p>常见的坑：docker容器使用后台运行就必须要有一个前台进程，docker发现没有应用，就会自动停止！</p>
<p>如nginx容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了。</p>
<h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail 10 容器id	# 显示10条日志</span><br><span class="line">	-tf 			# 显示日志</span><br><span class="line">	--tail number 	# 要显示的日志条数</span><br></pre></td></tr></table></figure>

<h3 id="查看容器中进程信息"><a href="#查看容器中进程信息" class="headerlink" title="查看容器中进程信息"></a>查看容器中进程信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器id</span><br></pre></td></tr></table></figure>

<h3 id="查看容器元数据"><a href="#查看容器元数据" class="headerlink" title="查看容器元数据"></a>查看容器元数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@zhenghaoyun ~]$ docker inspect be9f24ac2472</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;be9f24ac24725cbcf7b0a0495c3d9590d3d158994e0a1029542675711908aacd&quot;，</span><br><span class="line">        &quot;Created&quot;: &quot;2020-05-26T09:41:19.843651451Z&quot;，</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/bash&quot;，</span><br><span class="line">        &quot;Args&quot;: []，</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;，</span><br><span class="line">            &quot;Running&quot;: true，</span><br><span class="line">            &quot;Paused&quot;: false，</span><br><span class="line">            &quot;Restarting&quot;: false，</span><br><span class="line">            &quot;OOMKilled&quot;: false，</span><br><span class="line">            &quot;Dead&quot;: false，</span><br><span class="line">            &quot;Pid&quot;: 8235，</span><br><span class="line">            &quot;ExitCode&quot;: 0，</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;，</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2020-05-26T09:41:20.356642351Z&quot;，</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a>进入当前正在运行的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker exec -it 容器id bashShell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式二</span></span><br><span class="line">docker attach 容器id</span><br><span class="line">正在执行的代码....</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker <span class="built_in">exec</span>			<span class="comment"># 进入容器后开启一个新的终端，可以在里面操作(常用)</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker attach			<span class="comment"># 进入容器正在执行的终端，不会启动新的进程</span></span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@zhenghaoyun ~]$ docker exec -it be9f24ac2472 /bin/bash</span><br><span class="line">[root@be9f24ac2472 /]# exit		#进入到了一个新的终端</span><br><span class="line">exit</span><br><span class="line">[root@zhenghaoyun ~]$ docker attach be9f24ac2472</span><br><span class="line">[root@be9f24ac2472 /]# 			#进入容器正在执行的终端</span><br></pre></td></tr></table></figure>

<h3 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:/文件路径	/目标主机路径 	# 拷贝文件到主机</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝是一个手动过程，未来我们使用	-v	卷的技术，可以实现</span></span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200622122411.png" alt="image-20200622122410348"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">attach 	Attach to a running container						#当前sheil卜attach住按指定您行谎你</span><br><span class="line">build	Build an image from a Dockerfile					#通过Dockerfile定制镜像</span><br><span class="line">commit	Create a new image from a container changes			#提交当前容器为新的镜像</span><br><span class="line">cp	Copy files&#x2F;folders from the containers filesystem to the host path	#从容器中拷贝指定文件或者目录到宿主机中</span><br><span class="line">create	Create a new container								#创建一个新的容器，同run，但不启动容器</span><br><span class="line">diff	Inspect changes on a containers filesystem			#查看docker容器变化</span><br><span class="line">events	Get real time events from the server				#从docker 服务获取容器实时事件</span><br><span class="line">exec	Run a command in an existing container 				#在已存在的容器上运行命令</span><br><span class="line">export	Stream the contents of a container as a tar archive	#导出容器的内容流作为一个tar归档文件[对应import ]</span><br><span class="line">history	Show the history of an image						#展示一个镜像形成历史</span><br><span class="line">images	List images											#列出系统当前镜像</span><br><span class="line">import	Create a new filesystem image from the contents of a tarball #从tar包中的内容创建一个新的文件系统映僧[对应export]</span><br><span class="line">info	Display system-wide information						#显示系统相关信息</span><br><span class="line">inspect Return 1ow-leve1 information on a container			#查看容器详细信息</span><br><span class="line">ki11	Ki11 a running container							# ki11 指定docker 容器</span><br><span class="line">load	Load an image from a tar archive					#从一个tar包中加载-一个镜像[对应save]</span><br><span class="line">login	Register or Login to the docker registry server		#注册或者登录一个docker 源服务器</span><br><span class="line">logout	Log out fromLa Docker registry server				#从当前Docker registry 退出</span><br><span class="line">1ogs	Fetch the 1ogs of a container						#输出当村容器日志信息</span><br><span class="line">port	Lookup the public- facing port which is NAT-ed to PRIVATE PORT	#查看映射端口对应的容器内郵源端</span><br><span class="line">pause	Pause a11 processes within a container				#暂停容器</span><br><span class="line">ps	List containers											#列出容器列表</span><br><span class="line">pull	Pull an image or a repository from the docker registry server #从docker境像源原 务器拉取指定镜像或者库镜像</span><br><span class="line">push	Push an image or a repository to the docker registry server	#推送指定镜像或者库镜像至docker源服务器</span><br><span class="line">restart	Restart a running container							#重启运行的容器</span><br><span class="line">rm	Remove one or more containers							#移除一个或者多个容器</span><br><span class="line">rmi	Remove one or more images								#移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或-个强制删除]</span><br><span class="line">run	Run a command in a new container						#创建一个新的容器并运行一个命令</span><br><span class="line">save	Save an image toa tar archive						#保存一个镜像为一个tar包[对应load]</span><br><span class="line">search	Search for an image on the Docker Hub				#在docker hub中搜索镜像</span><br><span class="line">start	Start a stopped containers							#启动容器</span><br><span class="line">stop	stop a running containers							#停止容器</span><br><span class="line">tag	Tag an image into a reposi tory							#给源中镜像打标签</span><br><span class="line">top	Lookup the running processes of a container				#查看容器中运行的进程信息</span><br><span class="line">unpause	Unpause a paused container							#取消暂停容器</span><br><span class="line">version	Show the docker vers ion information				#查看docker 版本号</span><br><span class="line">wait	B1ock until a container stops， then print its exit code # 截取容器停止时的退出状态值</span><br></pre></td></tr></table></figure>

<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="docker安装nginx"><a href="#docker安装nginx" class="headerlink" title="docker安装nginx"></a>docker安装nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索镜像 search 建议去docker hub上搜索</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像 pull</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行测试</span></span><br><span class="line"></span><br><span class="line">[root@zhenghaoyun ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               latest              602e111c06b6        3 weeks ago         127MB</span><br><span class="line">centos              latest              470671670cac        3 months ago        237MB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d 后台执行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --name 给容器命名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p 宿主机端口:容器内部端口  (映射)</span></span><br><span class="line">[root@zhenghaoyun ~]# docker run -d --name nginx01 -p 3344:80 nginx</span><br><span class="line">83505a20805b0891e43e895097a7c84a1450a65b0d1b83e54880fafa7b8ef8a5</span><br><span class="line">[root@zhenghaoyun ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">83505a20805b        nginx               &quot;nginx -g &#x27;daemon of…&quot;   9 seconds ago       Up 8 seconds        0.0.0.0:3344-&gt;80/tcp   nginx01</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">[root@zhenghaoyun ~]# docker exec -it nginx01 /bin/bash</span><br><span class="line">root@83505a20805b:/# ls</span><br><span class="line">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">root@83505a20805b:/# whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class="line">root@83505a20805b:/# cd /etc/nginx</span><br><span class="line">root@83505a20805b:/etc/nginx# ls</span><br><span class="line">conf.d  fastcgi_params  koi-utf  koi-win  mime.types  modules  nginx.conf  scgi_params  uwsgi_params  win-utf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出容器</span></span><br><span class="line">root@83505a20805b:/etc/nginx# exit</span><br><span class="line">exit</span><br><span class="line">[root@zhenghaoyun ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">83505a20805b        nginx               &quot;nginx -g &#x27;daemon of…&quot;   8 minutes ago       Up 8 minutes        0.0.0.0:3344-&gt;80/tcp   nginx01</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止容器运行</span></span><br><span class="line">[root@zhenghaoyun ~]# docker stop 83505a20805b</span><br><span class="line">83505a20805b</span><br></pre></td></tr></table></figure>

<p><strong>如何理解端口暴露（宿主机端口：容器内部端口）？</strong></p>
<img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120335.png" alt="image-20200706120334523" style="zoom:80%;" />

<p>即通过宿主机的3344端口可以访问到nginx01容器内部的80端口</p>
<blockquote>
<p>问题：每次改动nginx配置文件，都需要进入容器内部，十分麻烦</p>
<p>解决：数据卷技术（后面会学习到）</p>
</blockquote>
<h3 id="docker安装tomcat"><a href="#docker安装tomcat" class="headerlink" title="docker安装tomcat"></a>docker安装tomcat</h3><p>1.官方的使用方式</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 官方的使用</span></span><br><span class="line">docker run -it --rm tomcat:9.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们之前的启动都是后台启动，停止了容器后，容器还是可以查到  而docker run -it --rm 一般用来测试，用完就删除了。</span></span><br></pre></td></tr></table></figure>

<p>2.一般方式</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载再启动</span></span><br><span class="line">docker pull tomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动运行</span></span><br><span class="line">docker run -d -p 80:8080 --name tomcat01 tomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载的tomcat没有webapps，阿里云镜像默认是最小镜像，所有不必要的东西都会被剔除</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试访问没有问题，但是404，因为webapps中没有项目，需要把webapps.dist下的东西拷贝到webapps中</span></span><br></pre></td></tr></table></figure>



<h3 id="docker安装ES-Kibana"><a href="#docker安装ES-Kibana" class="headerlink" title="docker安装ES+Kibana"></a>docker安装ES+Kibana</h3><blockquote>
<p>es 暴露的端口很多！</p>
<p>es 十分耗内存！</p>
<p>es 的数据一般要放置到安全的目录！使用挂载！</p>
</blockquote>
<p>1.下载并启动es</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker network create somenetwork</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> elasticsearch:7.7.0</span></span><br></pre></td></tr></table></figure>

<p>2.测试启动是否成功</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl localhost:9200</span></span><br></pre></td></tr></table></figure>

<p>3.如果不成功，可能是内存不够，因为docker非常的耗内存。查看容器日志寻找错误原因。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker logs -ft 8cb65d8a1627</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 错误原因</span></span><br><span class="line">2020-05-27T10:13:57.587645924Z OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x000000008a660000， 1973026816， 0) failed; error=&#x27;Cannot allocate memory&#x27; (errno=12)</span><br><span class="line">2020-05-27T10:13:57.587716355Z #</span><br><span class="line">2020-05-27T10:13:57.587722244Z # There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class="line">2020-05-27T10:13:57.587725840Z # Native memory allocation (mmap) failed to map 1973026816 bytes for committing reserved memory.</span><br><span class="line">2020-05-27T10:13:57.587729419Z # An error report file with more information is saved as:</span><br><span class="line">2020-05-27T10:13:57.587732980Z # /tmp/hs_err_pid1.log</span><br></pre></td></tr></table></figure>

<p>4.删除容器，增加对内存的限制。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">先删除容器</span></span><br><span class="line">[root@zhenghaoyun ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">67550d49d74e        elasticsearch:7.7.0   &quot;/tini -- /usr/local…&quot;   4 minutes ago       Exited (1) 4 minutes ago                       elasticsearch</span><br><span class="line">[root@zhenghaoyun ~]# docker rm 67550d49d74e</span><br><span class="line">67550d49d74e</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动容器，使用 -e ES_JAVA_OPTS=<span class="string">&quot;-Xms64m -Xmx512m&quot;</span>增加了对内存的限制</span></span><br><span class="line">[root@zhenghaoyun ~]# docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.7.0</span><br><span class="line">1147b24344a98d01bb894d5b5cee7ab3867b7c8a0962fb778ae406de8e7aef31</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看容器是否启动</span></span><br><span class="line">[root@zhenghaoyun ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                                            NAMES</span><br><span class="line">1147b24344a9        elasticsearch:7.7.0   &quot;/tini -- /usr/local…&quot;   5 seconds ago       Up 4 seconds        0.0.0.0:9200-&gt;9200/tcp， 0.0.0.0:9300-&gt;9300/tcp   elasticsearch</span><br></pre></td></tr></table></figure>

<p>5.再次测试</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@zhenghaoyun ~]# curl localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;1147b24344a9&quot;</span>，</span><br><span class="line">  <span class="string">&quot;cluster_name&quot;</span> : <span class="string">&quot;docker-cluster&quot;</span>，</span><br><span class="line">  <span class="string">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;v4t6u-mdQ1iA5HvImqPn_Q&quot;</span>，</span><br><span class="line">  <span class="string">&quot;version&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;number&quot;</span> : <span class="string">&quot;7.7.0&quot;</span>，</span><br><span class="line">    <span class="string">&quot;build_flavor&quot;</span> : <span class="string">&quot;default&quot;</span>，</span><br><span class="line">    <span class="string">&quot;build_type&quot;</span> : <span class="string">&quot;docker&quot;</span>，</span><br><span class="line">    <span class="string">&quot;build_hash&quot;</span> : <span class="string">&quot;81a1e9eda8e6183f5237786246f6dced26a10eaf&quot;</span>，</span><br><span class="line">    <span class="string">&quot;build_date&quot;</span> : <span class="string">&quot;2020-05-12T02:01:37.602180Z&quot;</span>，</span><br><span class="line">    <span class="string">&quot;build_snapshot&quot;</span> : <span class="keyword">false</span>，</span><br><span class="line">    <span class="string">&quot;lucene_version&quot;</span> : <span class="string">&quot;8.5.1&quot;</span>，</span><br><span class="line">    <span class="string">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="string">&quot;6.8.0&quot;</span>，</span><br><span class="line">    <span class="string">&quot;minimum_index_compatibility_version&quot;</span> : <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">  &#125;，</span><br><span class="line">  <span class="string">&quot;tagline&quot;</span> : <span class="string">&quot;You Know， for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>问题：不可以使用kibana直接连接ES，因为他们是互相隔离的，那么如何解决呢?</p>
</blockquote>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120410.png" alt="image-20200706120410384"></p>
<h1 id="Docker可视化"><a href="#Docker可视化" class="headerlink" title="Docker可视化"></a>Docker可视化</h1><p><strong>potainer</strong>是Docker图形化界面管理工具，提供了一个后台面板供我们操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8088:9000 \</span><br><span class="line">--restart&#x3D;always -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock --privileged&#x3D;true portainer&#x2F;portainer</span><br></pre></td></tr></table></figure>

<p>访问测试: <a class="link"   target="_blank" rel="noopener" href="http://ip:8088/" >http://ip:8088/<i class="fas fa-external-link-alt"></i></a> (阿里云安全组需要开放8088端口)</p>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120429.png" alt="image-20200706120428943"></p>
<h1 id="Docker镜像详解"><a href="#Docker镜像详解" class="headerlink" title="Docker镜像详解"></a>Docker镜像详解</h1><h2 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h2><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量以及配置文件等。</p>
<p>所有的应用，直接打包成docker镜像。就直接可以跑起来。</p>
<p>如何得到镜像:</p>
<ul>
<li>从远程仓库下载</li>
<li>朋友拷贝给你</li>
<li>自己制作一个DockerFile</li>
</ul>
<h2 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h2><blockquote>
<p>UnionFS（联合文件系统）</p>
</blockquote>
<p>UnionFs（联合文件系统）：union文件系统（UnionFs）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件下。</p>
<p>Union文件系统是Docker镜像的基础，镜像可以通过分层来进行继承，基于基础镜像，可以制作各种具体的应用镜像。</p>
<p>特性：一次同时加载多个文件系统，但从外面看来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p>
<blockquote>
<p>镜像加载原理</p>
</blockquote>
<p>Docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统称作UnionFs。</p>
<p>Bootfs（boot-file system）主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs，这一层与我们典型的Linux/unix系统是一样的，包含boot加载器和内核，当boot加载完成之后整个内核就能在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p>
<p>Rootfs（root-file system），在bootfs之上，包含的就是典型Linux系统中的/dev、/proc、/bin、/etc等标准目录和文件，rootfs就是各种不同操作系统的发行版，比如Ubuntu，Centos等等。</p>
<p>对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序就可以了（像我从docker上下载的centos只包含了一点点基本命令），因为底层直接用宿主机的内核，自己只需要提供rootfs就可以了，因此可见，对于不用的Linux发行版，bootfs基本是一致的，而rootfs会有差别，因此不同的发行版可以公用bootfs。</p>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200530235921.jpg" alt="img"></p>
<h2 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h2><p>我们可以去下载一个镜像，注意观察下载的日志输出，可以看到是一层一层的在下载!</p>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120450.png" alt="image-20200706120450104"></p>
<blockquote>
<p>Docker为什么采用分层结构呢？</p>
</blockquote>
<p><strong>共享资源！</strong></p>
<p>多个镜像从相同的基础镜像构建而来，那么宿主机只需在磁盘上保存一份基础镜像，同时内存中也只需加载一份基础镜像就可以为所有容器服务了，并且镜像的每一层都可以被共享。</p>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200530235958.png" alt="img"></p>
<blockquote>
<p>特点</p>
</blockquote>
<p>Docker镜像都是只读的，当容器启动时， 一个新的可写层被加载到镜像的顶部！</p>
<p>这一层就是我们通常说的容器层，容器之下的都叫镜像层！</p>
<h2 id="镜像提交"><a href="#镜像提交" class="headerlink" title="镜像提交"></a>镜像提交</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 提交容器成为一个新的副本</span></span><br><span class="line">docker commit </span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令和git基本类似</span></span><br><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</span><br></pre></td></tr></table></figure>

<p><strong>实战</strong>：做一个有webapps的tomcat镜像</p>
<ol>
<li><p>启动一个默认的tomcat</p>
</li>
<li><p>发现这个默认的tomcat webapps下没有项目，官方的默认镜像下就是没有文件的</p>
</li>
<li><p>我们自己拷贝进去基本的文件，然后提交</p>
</li>
<li><p>将我们操作过的容器通过commit提交为新的镜像，我们以后就用我们修改过的镜像就可以，这就是我们一个修改过的镜像</p>
</li>
</ol>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120513.png" alt="image-20200706120512964"></p>
<ol start="5">
<li>以后就可以直接用这个镜像了</li>
</ol>
<h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h2><blockquote>
<p>问题：如果数据都在容器中，如果我们将容器删除，数据就会丢失，希望可以做到容器删除，数据不丢失，做到数据持久化。</p>
</blockquote>
<p>容器之间可以有一个数据共享的技术，Docker容器中产生的数据，可以同步到本地。</p>
<p>这就是卷技术，说白了就是目录的挂载，将我们容器内的目录，挂载到Linux上面。</p>
<blockquote>
<p>总结</p>
</blockquote>
<ul>
<li>容器的持久化和同步操作</li>
<li>容器间数据也是可以共享的</li>
</ul>
<h2 id="使用容器数据卷"><a href="#使用容器数据卷" class="headerlink" title="使用容器数据卷"></a>使用容器数据卷</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录：容器内目录</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@zhenghaoyun home]# mkdir test</span><br><span class="line">[root@zhenghaoyun home]# docker run -it -v /home/test:/home centos /bin/bash</span><br><span class="line">[root@d0686ec1c489 /]# cd /home</span><br><span class="line">[root@d0686ec1c489 home]# ls</span><br><span class="line"><span class="meta">#</span><span class="bash"> 没有任何东西</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 新开一个终端，创建test.java文件</span></span><br><span class="line">[root@zhenghaoyun home]# cd test</span><br><span class="line">[root@zhenghaoyun test]# touch test.java</span><br><span class="line">[root@zhenghaoyun test]# </span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 发现容器内也有test.java了</span></span><br><span class="line">[root@d0686ec1c489 home]# ls</span><br><span class="line">test.java</span><br></pre></td></tr></table></figure>

<p>使用<code>docker inspect</code>查看挂载信息</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@zhenghaoyun test]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">d0686ec1c489        centos              &quot;/bin/bash&quot;         4 minutes ago       Up 4 minutes                            silly_kepler</span><br><span class="line">[root@zhenghaoyun test]# docker inspect d0686ec1c489</span><br></pre></td></tr></table></figure>

<p>慢慢翻可以看到以下信息：</p>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200528153813.png" alt="image-20200527225426184"></p>
<p>可以看到成功绑定了</p>
<p>之后不管是修改宿主机内文件还是修改容器内文件，都会自动同步。</p>
<h2 id="实战：安装MySQL"><a href="#实战：安装MySQL" class="headerlink" title="实战：安装MySQL"></a>实战：安装MySQL</h2><blockquote>
<p>实现MySQL的数据持久化问题</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取镜像</span></span><br><span class="line">[root@zhenghaoyun /]# docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行容器，需要做数据挂载 . 安装启动mysql时，一定要有密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 官方运行实例</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动mysql</span></span><br><span class="line">-d 后台运行</span><br><span class="line">-p 映射端口</span><br><span class="line">-v 卷挂载</span><br><span class="line">-e 环境配置</span><br><span class="line">--name 容器名字</span><br><span class="line">[root@zhenghaoyun /]# docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name=mysql01 mysql:5.7 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动成功之后，在本地使用Navicat连接测试一下</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Navicat连接到服务器的3310 --- 3310与容器内的3306映射，连接成功</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在本地测试创建一个数据库，查看一下我们映射的路径是否ok</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 成功</span></span><br></pre></td></tr></table></figure>

<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200528155818.png" alt="image-20200528155817964"></p>
<p>如果连接失败，查看下安全组是否开放端口。</p>
<p>当mysql容器删掉的时候，宿主机的数据库文件仍然存在，实现了数据持久化，数据不会丢失。</p>
<h2 id="具名挂载和匿名挂载"><a href="#具名挂载和匿名挂载" class="headerlink" title="具名挂载和匿名挂载"></a>具名挂载和匿名挂载</h2><h3 id="匿名挂载"><a href="#匿名挂载" class="headerlink" title="匿名挂载"></a>匿名挂载</h3><p>挂载的时候可以不指定主机目录</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -v 容器内路径 	-P 随机映射端口</span></span><br><span class="line">[root@zhenghaoyun ~]#  docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line">a3aea776a59f7568950d5eb822e65b32a6f9cd42e2c985a58c31d4dfec3e00d4</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有卷的情况</span></span><br><span class="line">[root@zhenghaoyun ~]# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               3fbc02b34b7db4bca1558728d8edea592541e748f6f898464a465331000e7c04              </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里发现，这种就是就是匿名挂载，我们在-v的时候，只写了内部路径，没有写容器外的路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 会自动创建一个名字由字符和数字组成的数据卷</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过docker volume ls可以查看数据卷列表</span></span><br></pre></td></tr></table></figure>

<h3 id="具名挂载"><a href="#具名挂载" class="headerlink" title="具名挂载"></a>具名挂载</h3><p>挂载的时候创建一个自定义名称的数据卷</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将/etc/nginx nginx挂载到juming-nginx这个数据卷上</span></span><br><span class="line">[root@zhenghaoyun ~]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class="line">79a2190e4658af610cf76635980f7176e1daf443a43f612fb418ca559880891f</span><br><span class="line"></span><br><span class="line">[root@zhenghaoyun ~]# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               juming-nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看下这个卷的具体信息</span></span><br><span class="line">[root@zhenghaoyun ~]# docker volume inspect juming-nginx</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2020-05-28T16:25:24+08:00&quot;，</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;，</span><br><span class="line">        &quot;Labels&quot;: null，</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/juming-nginx/_data&quot;，</span><br><span class="line">        &quot;Name&quot;: &quot;juming-nginx&quot;，</span><br><span class="line">        &quot;Options&quot;: null，</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所有的docker容器内的卷，没有指定目录的情况下都是在<code>/var/lib/docker/volumes/xxx/_data</code>。</p>
<p>我们通过具名挂载可以方便的找到我们的一个卷，大多数情况下我们使用<strong>具名挂载</strong>。</p>
<blockquote>
<p>如何确定是具名挂载还是匿名挂载</p>
</blockquote>
<ul>
<li>-v 容器内路径                  # 匿名挂载</li>
<li>-v 卷名:容器内路径            # 具名挂载</li>
<li>-v /宿主机路径:容器内路径   # 指定路径挂载，一般是/开头的，指绝对路径</li>
</ul>
<blockquote>
<p>拓展</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过 -v 容器内路径:ro或者rw 改变读写权限</span></span><br><span class="line">ro		readonly	# 只读</span><br><span class="line">rw		readwrite	# 可读可写</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一旦设置了这个容器权限，容器对我们挂载出来的内容就限定了</span></span><br><span class="line">docker run -d -P --name=nginx02 -v juming-nginx:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name=nginx02 -v juming-nginx:/etc/nginx:rw nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只要看到ro，就说明这个路径只能通过宿主机来操作，容器内无法操作</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认rw</span></span><br></pre></td></tr></table></figure>

<h2 id="初识DockerFile"><a href="#初识DockerFile" class="headerlink" title="初识DockerFile"></a>初识DockerFile</h2><p>DockerFile就是用来构建Docker镜像的构建文件，它其实就是一个命令脚本。</p>
<p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本一个个的命令，每个命令都是一层。</p>
<p><strong>编写DokcerFile</strong></p>
<p>创建一个dockerfile文件，名字可以随意，建议还是dockerfile。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在容器中创建两个数据卷目录，这是匿名挂载，在宿主机上通过docker inspect 容器id 可以查看到这两个目录挂载在哪里。</span></span><br><span class="line">VOLUME [&quot;volume01&quot;，&quot;volume02&quot;]</span><br><span class="line"></span><br><span class="line">CMD echo &quot;----end----&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>

<p><strong>通过DockerFile生成镜像</strong></p>
<p><code>zhy/centos:1.0</code>为生成的<code>镜像名:tag</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f /home/docker-test-volume/dockerfile -t zhy/centos:1.0 .</span><br></pre></td></tr></table></figure>

<p>通过这种方式就生成了一个镜像，通过这个镜像生成一个容器的时候，这个容器的挂载和我们再DockerFile文件内设置的是一样的。volume01和volume01匿名挂载的时候，挂载在<code>/var/lib/docker/volumes/xxx/_data</code>。</p>
<p><strong>启动自己的镜像</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@zhenghaoyun docker-test-volume]# docker run -it zhy/centos</span><br><span class="line">Unable to find image &#x27;zhy/centos:latest&#x27; locally</span><br><span class="line">^Z</span><br><span class="line">[1]+  Stopped                 docker run -it zhy/centos</span><br><span class="line">[root@zhenghaoyun docker-test-volume]# docker run -it e53d4f7b84cd</span><br><span class="line">[root@cc887d7eecc0 /]# ls</span><br><span class="line">bin  home   lost+found	opt   run   sys  var</span><br><span class="line">dev  lib    media	proc  sbin  tmp  volume01</span><br><span class="line">etc  lib64  mnt		root  srv   usr  volume02</span><br></pre></td></tr></table></figure>

<p><strong>查看挂载目录</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker inpect 容器id</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看mounts项可以看到挂载信息</span></span><br><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;，</span><br><span class="line">                &quot;Name&quot;: &quot;aab60727df7805eb76d78f0ddfdc0fa8cab7d16d5090d85ca0dcea28419742b8&quot;，</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/aab60727df7805eb76d78f0ddfdc0fa8cab7d16d5090d85ca0dcea28419742b8/_data&quot;，</span><br><span class="line">                &quot;Destination&quot;: &quot;volume01&quot;，</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;，</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;，</span><br><span class="line">                &quot;RW&quot;: true，</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;，</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;，</span><br><span class="line">                &quot;Name&quot;: &quot;a99afe0b7a935a8f0834e294df7e4b9506d9ba6c637d9b3f19a45fea1c9d448a&quot;，</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/a99afe0b7a935a8f0834e294df7e4b9506d9ba6c637d9b3f19a45fea1c9d448a/_data&quot;，</span><br><span class="line">                &quot;Destination&quot;: &quot;volume02&quot;，</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;，</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;，</span><br><span class="line">                &quot;RW&quot;: true，</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure>



<h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p>如果用户需要在容器之间共享一些持续更新的数据，最简单的方式是使用数据卷容器，数据卷容器其实是一个普通的容器，专门用来提供数据卷供其它容器挂载。</p>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120537.png" alt="image-20200706120536765"></p>
<p><strong>启动三个容器</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=docker01 zhy/centos:1.0</span><br><span class="line">docker run -it --name docker02 --volumes-from docker01 zhy/centos:1.0</span><br><span class="line">docker run -it --name docker03 --volumes-from docker02 zhy/centos:1.0</span><br></pre></td></tr></table></figure>

<p><strong>分别进入docker01、docker02、docker03后发现都含有volumes01、volumes02这两个数据卷。</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@8fff8e978165 /]# ls</span><br><span class="line">bin  home   lost+found	opt   run   sys  var</span><br><span class="line">dev  lib    media	proc  sbin  tmp  volume01</span><br><span class="line">etc  lib64  mnt		root  srv   usr  volume02</span><br></pre></td></tr></table></figure>

<p><strong>进入docker01的volume01后创建文件test.java</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@zhenghaoyun _data]# docker attach docker01</span><br><span class="line">[root@e73760697aea /]# ls</span><br><span class="line">bin  home   lost+found	opt   run   sys  var</span><br><span class="line">dev  lib    media	proc  sbin  tmp  volume01</span><br><span class="line">etc  lib64  mnt		root  srv   usr  volume02</span><br><span class="line">[root@e73760697aea /]# cd volume01</span><br><span class="line">[root@e73760697aea volume01]# ls</span><br><span class="line">[root@e73760697aea volume01]# touch test.java</span><br></pre></td></tr></table></figure>

<p><strong>然后再进docker02和docker03发现docker01创建的文件同步到了docker02和docker03上</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@zhenghaoyun _data]# docker attach docker02</span><br><span class="line">[root@8fff8e978165 /]# cd volume01</span><br><span class="line">[root@8fff8e978165 volume01]# ls</span><br><span class="line">test.java</span><br><span class="line">[root@8fff8e978165 volume01]# read escape sequence</span><br><span class="line">[root@zhenghaoyun _data]# docker attach docker03</span><br><span class="line">[root@26c6fd5d06e9 /]# cd volume01</span><br><span class="line">[root@26c6fd5d06e9 volume01]# ls</span><br><span class="line">test.java</span><br></pre></td></tr></table></figure>

<p><strong>删掉容器docker02后，在docker01的volume01中新增文件test2.java</strong></p>
<p>测试结果发现docker03中也有test2.java</p>
<p>说明删掉了一个容器，剩余的容器仍然能实现数据共享！</p>
<p>因为docker的数据共享是基于拷贝机制的！</p>
<p><strong>结论:</strong></p>
<p>容器之间配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止，但是一旦你持久化到了本地，这个时候，本地的数据是不会删除的。</p>
<h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><p>dockerfile 是用来构建docker镜像的文件，它是一个命令参数脚本。</p>
<h2 id="构建步骤"><a href="#构建步骤" class="headerlink" title="构建步骤"></a>构建步骤</h2><ol>
<li>编写一个dockerfile文件</li>
<li>docker build 构建成为一个镜像</li>
<li>docker run 运行镜像</li>
<li>docker push 发布镜像(DockerHub，阿里云镜像仓库)</li>
</ol>
<h2 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a><strong>构建过程</strong></h2><p><strong>Dockerfile基础知识</strong></p>
<ol>
<li>每个保留关键字(指令)都必须是大写字母</li>
<li>从上到下顺序执行</li>
<li>#表示注释</li>
<li>每一个指令都会创建一个新的镜像层，并提交</li>
</ol>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200531000124.png" alt="image-20200516233824923"></p>
<p>dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单。 </p>
<p>Docker镜像逐渐成为了企业交付的标准，必须要掌握。</p>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM 				# 基础镜像，一切从这里开始构建</span><br><span class="line">MAINTAINER			# 镜像是谁写的，姓名+邮箱</span><br><span class="line">RUN					# 镜像构建的时候需要运行的命令</span><br><span class="line">ADD					# 步骤: tomcat镜像，这个tomcat压缩包，添加内容</span><br><span class="line">WORKDIR				# 镜像的工作目录</span><br><span class="line">VOLUME				# 挂载的目录</span><br><span class="line">EXPOSE				# 暴露端口配置	</span><br><span class="line">CMD					# 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT			# 指定这个容器启动的时候要运行的命令，可以追加命令而CMD不可以追加</span><br><span class="line">ONBUILD				# 当构建一个被继承 DockerFile 这个时候就会运行ONBUILD指令，触发指令</span><br><span class="line">COPY				# 类似ADD	将我们的文件拷贝到镜像中</span><br><span class="line">ENV					# 构建的时候设置环境变量</span><br></pre></td></tr></table></figure>

<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200531000229.png" alt="image-20200516234710747"></p>
<h3 id="CMD和ENTRYPOINT的区别"><a href="#CMD和ENTRYPOINT的区别" class="headerlink" title="CMD和ENTRYPOINT的区别"></a>CMD和ENTRYPOINT的区别</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CMD					# 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT			# 指定这个容器启动的时候要运行的命令，可以追加命令</span><br></pre></td></tr></table></figure>

<p><strong>测试CMD</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写dockerfile文件</span></span><br><span class="line">[root@zhenghaoyun dockerfile]# vim dockerfile-cmd-test</span><br><span class="line">FROM centos</span><br><span class="line">CMD [&quot;ls&quot;，&quot;-a&quot;]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line">[root@zhenghaoyun dockerfile]# docker build -f dockerfile-cmd-test -t cmdtest .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> run运行，发现我们的ls -a生效</span></span><br><span class="line">[root@zhenghaoyun dockerfile]# docker run cmdtest</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 想追加一个命令 -l 发现报错 (ls -al)</span></span><br><span class="line">[root@zhenghaoyun dockerfile]# docker run cmdtest -l</span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused &quot;exec: \&quot;-l\&quot;: executable file not found in $PATH&quot;: unknown.</span><br><span class="line">ERRO[0000] error waiting for container: context canceled </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CMD的情况下 -l 替换了CMD [<span class="string">&quot;ls&quot;</span>，<span class="string">&quot;-a&quot;</span>]		-l不是命令所以就会报错</span></span><br></pre></td></tr></table></figure>

<p><strong>测试ENTRYPOINT</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@zhenghaoyun dockerfile]# vim dockerfile-cmd-entrypoint</span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT [&quot;ls&quot;，&quot;-a&quot;]</span><br><span class="line"></span><br><span class="line">[root@zhenghaoyun dockerfile]# docker build -f dockerfile-cmd-entrypoint -t entrypoint-test .</span><br><span class="line">[root@zhenghaoyun dockerfile]# docker run entrypoint-test</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们的追加命令，是直接拼接在我们的ENTRYPOINT命令的后面</span></span><br><span class="line">[root@zhenghaoyun dockerfile]# docker run entrypoint-test -l</span><br><span class="line">total 56</span><br><span class="line">drwxr-xr-x   1 root root 4096 May 17 02:13 .</span><br><span class="line">drwxr-xr-x   1 root root 4096 May 17 02:13 ..</span><br><span class="line">-rwxr-xr-x   1 root root    0 May 17 02:13 .dockerenv</span><br><span class="line">lrwxrwxrwx   1 root root    7 May 11  2019 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root  340 May 17 02:13 dev</span><br><span class="line">drwxr-xr-x   1 root root 4096 May 17 02:13 etc</span><br><span class="line">drwxr-xr-x   2 root root 4096 May 11  2019 home</span><br><span class="line">lrwxrwxrwx   1 root root    7 May 11  2019 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root    9 May 11  2019 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------   2 root root 4096 Jan 13 21:48 lost+found</span><br></pre></td></tr></table></figure>

<p>Dockerfile中很多命令都十分的相似，我们需要了解他们的区别，最好的学习就是对比然后测试。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p><code>FROM scratch</code></p>
<p>Dockerhub中99%的镜像都是从这个基础镜像过来的，然后根据需要的软件和配置来进行的构建。</p>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120602.png" alt="image-20200706120602087"></p>
<h3 id="创建一个自己的centOS"><a href="#创建一个自己的centOS" class="headerlink" title="创建一个自己的centOS"></a>创建一个自己的centOS</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写dockerfile文件</span></span><br><span class="line">[root@zhenghaoyun ~]# vim mydockerfile-centos</span><br><span class="line">[root@zhenghaoyun ~]# cat mydockerfile-centos </span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER zhy&lt;123456@qq.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD $MYPATH</span><br><span class="line">CMD &quot;----end----&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始构建</span></span><br><span class="line">[root@zhenghaoyun ~]# docker build -f mydockerfile-centos -t mycentos:0.1 .</span><br><span class="line">Sending build context to Docker daemon  231.5MB</span><br><span class="line">Step 1/10 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 470671670cac</span></span><br><span class="line">Step 2/10 : MAINTAINER zhy&lt;123456@qq.com&gt;</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 81104dc1bf58</span></span><br><span class="line">Removing intermediate container 81104dc1bf58</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 5083be5d9e3d</span></span><br><span class="line">...</span><br><span class="line">Removing intermediate container 1dd935006a10</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 863e1e9a99df</span></span><br><span class="line">Successfully built 863e1e9a99df</span><br><span class="line">Successfully tagged mycentos:0.1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看我们自己制作的镜像</span></span><br><span class="line">[root@zhenghaoyun ~]# docker images</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mycentos              0.1                 863e1e9a99df        29 seconds ago      321MB</span><br><span class="line">zhy/centos            1.0                 e53d4f7b84cd        About an hour ago   237MB</span><br><span class="line">mysql                 5.7                 a4fdfd462add        8 days ago          448MB</span><br><span class="line">nginx                 latest              9beeba249f3e        13 days ago         127MB</span><br><span class="line">elasticsearch         7.7.0               7ec4f35ab452        2 weeks ago         757MB</span><br><span class="line">portainer/portainer   latest              2869fc110bf7        2 months ago        78.6MB</span><br><span class="line">centos                latest              470671670cac        4 months ago        237MB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行镜像</span></span><br><span class="line">[root@zhenghaoyun ~]# docker run -it mycentos:0.1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看工作目录</span></span><br><span class="line">[root@222c4f170311 local]# pwd</span><br><span class="line">/usr/local</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过<code>docker history</code>查看镜像历史</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@zhenghaoyun ~]# docker history mycentos:0.1</span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line">863e1e9a99df        4 minutes ago       /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;/bin…   0B                  </span><br><span class="line">3630bf4d4b65        4 minutes ago       /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;\&quot;--…   0B                  </span><br><span class="line">bd395ab3f210        4 minutes ago       /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;$MYP…   0B                  </span><br><span class="line">539ddae94271        4 minutes ago       /bin/sh -c #(nop)  EXPOSE 80                    0B                  </span><br><span class="line">a44756b81bb3        4 minutes ago       /bin/sh -c yum -y install net-tools             24.1MB              </span><br><span class="line">9125de5f6a9b        4 minutes ago       /bin/sh -c yum -y install vim                   59.8MB              </span><br><span class="line">c44e45342f97        5 minutes ago       /bin/sh -c #(nop) WORKDIR /usr/local            0B                  </span><br><span class="line">1b747b2ad94b        5 minutes ago       /bin/sh -c #(nop)  ENV MYPATH=/usr/local        0B                  </span><br><span class="line">5083be5d9e3d        5 minutes ago       /bin/sh -c #(nop)  MAINTAINER zhy&lt;123456@qq.…   0B                  </span><br><span class="line">470671670cac        4 months ago        /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B                  </span><br><span class="line">&lt;missing&gt;           4 months ago        /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B                  </span><br><span class="line">&lt;missing&gt;           4 months ago        /bin/sh -c #(nop) ADD file:aa54047c80ba30064…   237MB   </span><br></pre></td></tr></table></figure>

<h3 id="制作一个tomcat镜像"><a href="#制作一个tomcat镜像" class="headerlink" title="制作一个tomcat镜像"></a>制作一个tomcat镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Dockerfile内容</span></span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER zhy&lt;123456@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u152-linux-x64.tar.gz /usr/local/</span><br><span class="line">ADD apache-tomcat-8.5.24.tar.gz /usr/local/</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_152</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-8.5.24</span><br><span class="line">ENV CATALINA_BASH /usr/local/apache-tomcat-8.5.24</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-8.5.24/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-8.5.24/bin/logs/catalina.out</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -t diytomcat .</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 3030:8080 --name zhytomcat</span></span><br><span class="line">-v /root/dockertest/test:/usr/local/apache-tomcat-8.5.24/webapps/test </span><br><span class="line">-v /root/dockertest/tomcatlogs/:/usr/local/apache-tomcat-8.5.24/logs diytomcat</span><br></pre></td></tr></table></figure>

<h1 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h1><h2 id="发布到DockerHub"><a href="#发布到DockerHub" class="headerlink" title="发布到DockerHub"></a>发布到DockerHub</h2><ol>
<li>去<a class="link"   target="_blank" rel="noopener" href="https://hub.docker.com/" >DockerHub<i class="fas fa-external-link-alt"></i></a>注册自己的账号</li>
<li>确定这个账号可以登录</li>
<li>在我们服务器上提交自己的镜像</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 登录dockerhub</span><br><span class="line">[root@zhenghaoyun ~]# docker login -u zhenghaoyun</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted in &#x2F;root&#x2F;.docker&#x2F;config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;commandline&#x2F;login&#x2F;#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br><span class="line"># 发布镜像前最好规范镜像名，如增加自己的姓名和版本号。</span><br><span class="line">[root@zhenghaoyun ~]# docker tag diytomcat zhy&#x2F;diytomcat:1.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># push，自己发布的镜像尽量带上版本号</span><br><span class="line">[root@zhenghaoyun ~]# docker push zhy&#x2F;diytomcat:1.0</span><br></pre></td></tr></table></figure>

<p>提交的时候也是按照镜像的层级来提交的。</p>
<h2 id="发布到阿里云镜像"><a href="#发布到阿里云镜像" class="headerlink" title="发布到阿里云镜像"></a>发布到阿里云镜像</h2><ol>
<li>登录阿里云</li>
<li>找到容器镜像服务</li>
<li>创建命名空间<img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120638.png" alt="image-20200706120638375"></li>
<li>创建仓库<img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120658.png" alt="image-20200706120657984"></li>
<li>参考阿里云教程</li>
</ol>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120717.png" alt="image-20200706120717214"></p>
<ol start="6">
<li>推送示例</li>
</ol>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120734.png" alt="image-20200706120734404"></p>
<h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120758.png" alt="image-20200706120758027"></p>
<h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><h2 id="理解Docker0"><a href="#理解Docker0" class="headerlink" title="理解Docker0"></a>理解Docker0</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@zhenghaoyun ~]# ip addr</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 本机回环地址</span></span><br><span class="line">1: lo: &lt;LOOPBACK，UP，LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="meta">#</span><span class="bash"> 阿里云内网地址</span></span><br><span class="line">2: eth0: &lt;BROADCAST，MULTICAST，UP，LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:16:3e:2c:49:f0 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.109.162/20 brd 172.17.111.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 311911158sec preferred_lft 311911158sec</span><br><span class="line">       </span><br><span class="line"><span class="meta">#</span><span class="bash"> docker0地址</span></span><br><span class="line">3: docker0: &lt;NO-CARRIER，BROADCAST，MULTICAST，UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:d2:e2:8f:bc brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.1/16 brd 172.18.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">74: br-fc3b359394e5: &lt;NO-CARRIER，BROADCAST，MULTICAST，UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:9e:68:59:59 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.19.0.1/16 brd 172.19.255.255 scope global br-fc3b359394e5</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>问题：docker是如何处理容器网络访问的</p>
</blockquote>
<p>我们每启动一个docker容器，docker就会给docker容器分配一个ip，我们只要安装了docker，就会有一个网卡docker0    桥接模式，使用的技术是veth-pair 技术。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动一个容器tomcat01</span></span><br><span class="line">[root@zhenghaoyun ~]# docker run -d -P --name tomcat01 tomcat</span><br><span class="line">8d31b16a8cc1361dbd2b9117de424063ee1831d6c717aee75f2f54ae3aa45cb8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器内ip，注意到有个119: eth0@if120</span></span><br><span class="line">[root@zhenghaoyun ~]# docker exec -it tomcat01 ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK，UP，LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">119: eth0@if120: &lt;BROADCAST，MULTICAST，UP，LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="meta"> #</span><span class="bash"> 尝试在容器外ping tomcat01，会发现可以ping通</span></span><br><span class="line">[root@zhenghaoyun ~]# ping 172.18.0.2</span><br><span class="line">PING 172.18.0.2 (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.079 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.057 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=3 ttl=64 time=0.054 ms</span><br><span class="line">^Z</span><br><span class="line">[1]+  Stopped                 ping 172.18.0.2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在容器外再次测试ip addr，会发现又多了一对网卡120: veth349e841@if119，和之前tomcat01内的是惊人的相似119: eth0@if120</span></span><br><span class="line">[root@zhenghaoyun ~]#  ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK，UP，LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST，MULTICAST，UP，LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:16:3e:2c:49:f0 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.109.162/20 brd 172.17.111.255 scope global dynamic eth0</span><br><span class="line">       valid_lft 311910065sec preferred_lft 311910065sec</span><br><span class="line">3: docker0: &lt;BROADCAST，MULTICAST，UP，LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:d2:e2:8f:bc brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.1/16 brd 172.18.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">74: br-fc3b359394e5: &lt;NO-CARRIER，BROADCAST，MULTICAST，UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:9e:68:59:59 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.19.0.1/16 brd 172.19.255.255 scope global br-fc3b359394e5</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">120: veth349e841@if119: &lt;BROADCAST，MULTICAST，UP，LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    link/ether da:41:5f:db:1e:89 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们发现这个容器带来的网卡都是一对一对的</p>
<p>veth-pair 就是一对的虚拟设备接口，他们都是成对出现的，一段连着协议，一段彼此相连</p>
<p>正因为有了这个特性，veth-pair 充当一个桥梁，连接各种虚拟网络设备的</p>
<p>OpenStac ，Docker容器之间的连接，OVS的连接，都是使用veth-pair 技术</p>
</blockquote>
<p>再来测试一下tomcat01和tomcat02是否可以ping通</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@zhenghaoyun ~]# docker exec -it tomcat02 ping 172.18.0.2</span><br><span class="line"></span><br><span class="line"># 结论: 容器和容器之间是可以互相ping通的</span><br></pre></td></tr></table></figure>

<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120820.png" alt="image-20200706120820087"></p>
<center>网络模型图</center>

<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a><strong>结论</strong></h3><p>tomcat01和tomcat02是共用的一个路由器，docker0</p>
<p>所有的容器不指定网络的情况下，都是docker0路由的，docker会给我们的容器分配一个默认的可用ip。</p>
<p>Docker使用的是Linux的桥接，宿主机中是一个Docker容器的网桥docker0。</p>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120842.png" alt="image-20200706120841594"></p>
<p>Docker中的所有的网络接口都是虚拟的，虚拟的转发效率高。(内网传递文件)</p>
<p>只要容器删除，对应的一对网桥就没有了。</p>
<h2 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h2><blockquote>
<p>思考一个场景，我们编写了一个微服务，database url=ip:，项目不重启，数据库ip换掉了，我们希望可以处理这个问题，可以通过名字来进行访问容器。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过名字无法ping</span></span><br><span class="line">[root@zhenghaoyun ~]# docker exec -it tomcat01 ping tomcat02</span><br><span class="line">ping: tomcat02: Name or service not known</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如何可以解决呢</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过--link就可以解决网络连通问题</span></span><br><span class="line">[root@zhenghaoyun ~]# docker run -d -P --name tomcat03 --link tomcat02 tomcat</span><br><span class="line">434fab3886a930372a75935b23abb2da4df07d1d860143c258769961e8b93e5a</span><br><span class="line">[root@zhenghaoyun ~]# docker exec -it tomcat03 ping tomcat02                  </span><br><span class="line">PING tomcat02 (172.17.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=1 ttl=64 time=0.070 ms</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=2 ttl=64 time=0.054 ms</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=3 ttl=64 time=0.074 ms</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 反向可以ping通吗? 不行，因为没有配置</span></span><br><span class="line">[root@zhenghaoyun ~]# docker exec -it tomcat02 ping tomcat03 </span><br><span class="line">ping: tomcat03: Name or service not known</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看tomcat03的hosts配置</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看hosts配置，在这里发现</span></span><br><span class="line">[root@zhenghaoyun ~]# docker exec -it tomcat03 cat /etc/hosts</span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br><span class="line">172.17.0.3      tomcat02 a8be6dc01d63</span><br><span class="line">172.17.0.4      434fab3886a9</span><br></pre></td></tr></table></figure>

<blockquote>
<p>本质探究</p>
</blockquote>
<p>–link就是我们在hosts配置中增加了一个172.17.0.3，tomcat02 a8be6dc01d63。</p>
<blockquote>
<p>注意</p>
</blockquote>
<p>我们现在用Docker已经不建议使用<code>--link</code>了</p>
<p>我们需要使用更高级的方式：<strong>自定义网络</strong>，不使用docker0。</p>
<p>docker0问题：它不支持容器名连接访问。</p>
<h2 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h2><blockquote>
<p>查看所有的docker网络</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@zhenghaoyun ~]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">e1e8a026e40f        bridge              bridge              local</span><br><span class="line">f2b909434e48        host                host                local</span><br><span class="line">255e387a2a2e        none                null                local</span><br><span class="line">fc3b359394e5        somenetwork         bridge              local</span><br></pre></td></tr></table></figure>

<blockquote>
<p>网络模式</p>
</blockquote>
<ul>
<li><p>bridge：桥接docker(默认，自己创建也是用bridge模式)</p>
</li>
<li><p>none：不配置网络</p>
</li>
<li><p>host：和宿主机共享网络</p>
</li>
<li><p>container：容器网络连通(用得少，局限很大)</p>
</li>
</ul>
<p>通常情况下，我们直接启动容器时，有个默认选项<code>--net bridge</code>，而这个就是我们的docker0。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 这两者是等价的</span><br><span class="line">docker run -d -P --name tomcat01 tomcat</span><br><span class="line">docker run -d -P --name tomcat01 --net bridge tomcat </span><br></pre></td></tr></table></figure>

<p>现在开始自定义一个网络吧</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker0特点: 默认，域名不能访问，		--link可以打通连接</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们可以自定义一个网络</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --driver bridge</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --subnet 192.168.0.0/16 	范围 192.168.0.2~192.168.255.255</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --gateway 192.168.0.1</span></span><br><span class="line"></span><br><span class="line">[root@zhenghaoyun ~]# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line">837a94ff18774c323b48011a41112fcf8e4a34b13f6b5557fbf3bdfe01675fba</span><br><span class="line">[root@zhenghaoyun ~]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">e1e8a026e40f        bridge              bridge              local</span><br><span class="line">f2b909434e48        host                host                local</span><br><span class="line">837a94ff1877        mynet               bridge              local</span><br><span class="line">255e387a2a2e        none                null                local</span><br><span class="line">fc3b359394e5        somenetwork         bridge              local</span><br><span class="line">[root@zhenghaoyun ~]# docker network inspect 837a94ff1877</span><br><span class="line">...</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                </span><br><span class="line">                	# 看这里，和我们自定义的一样！</span><br><span class="line">                </span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;，</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;，</span><br><span class="line">...</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>测试ping连接</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 再次测试ping连接</span><br><span class="line">[root@zhenghaoyun ~]# docker exec -it tomcat-net-01 ping 192.168.0.3</span><br><span class="line">PING 192.168.0.3 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.110 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.064 ms</span><br><span class="line"></span><br><span class="line"># 现在不适用--link也可以ping名字了</span><br><span class="line">[root@zhenghaoyun ~]# docker exec -it tomcat-net-01 ping tomcat-net-02</span><br><span class="line">PING tomcat-net-02 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.036 ms</span><br><span class="line">64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.065 ms</span><br></pre></td></tr></table></figure>

<p>我们自定义的网络docker都已经帮我们维护好了对应的关系，推荐我们平时这样使用网络。</p>
<p>好处:</p>
<p>有两个集群分别是redis和mysql，不同的集群使用不同的网络，保证集群是安全和健康的。</p>
<h2 id="网路连通"><a href="#网路连通" class="headerlink" title="网路连通"></a>网路连通</h2><p>通过以上的步骤，我们现在有两个网段了，一个是docker0和mynet，docker0和mynet内的容器是不能网络连通的，如何去解决这一问题？</p>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200530221342.png" alt="image-20200530221341088"></p>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200530221427.png" alt="image-20200530221425841"></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试打通tomcat01 - mynet</span></span><br><span class="line">[root@zhenghaoyun ~]# docker network connect mynet tomcat01</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 连通之后就是将tomcat01 放到了mynet网络下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一个容器两个ip地址</span>	</span><br><span class="line"><span class="meta">#</span><span class="bash"> 好比 阿里云服务:公网ip 私网ip</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># tomcat01可以ping通</span><br><span class="line">[root@zhenghaoyun ~]# docker exec -it tomcat01 ping tomcat-net-01</span><br><span class="line">PING tomcat-net-01 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.081 ms</span><br><span class="line">64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.070 ms</span><br><span class="line"></span><br><span class="line"># tomcat02依旧打不通</span><br><span class="line">[root@zhenghaoyun ~]# docker exec -it tomcat02 ping tomcat-net-01 </span><br><span class="line">ping: tomcat-net-01: Name or service not known</span><br></pre></td></tr></table></figure>

<p><strong>结论</strong></p>
<p>假设要跨网络操作别人，就需要使用docker network connect 连通。</p>
<h2 id="实战：部署redis集群"><a href="#实战：部署redis集群" class="headerlink" title="实战：部署redis集群"></a>实战：部署redis集群</h2><p>场景：r-m2突然挂掉了</p>
<p><img src="https://zhenghaoyun.oss-cn-beijing.aliyuncs.com/img/20200706120906.png" alt="image-20200706120905672"></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建网卡</span></span><br><span class="line">docker network create redis --subnet 172.38.0.0/16</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过脚本创建六个redis配置</span></span><br><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do \</span><br><span class="line">mkdir -p /mydata/redis/node-$&#123;port&#125;/conf</span><br><span class="line">touch /mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt;/mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes </span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1$&#123;port&#125;</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">docker run -p 637$&#123;port&#125;:6379 -p 1637$&#123;port&#125;:16379 --name redis-$&#123;port&#125; \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/data:/data \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.1$&#123;port&#125; redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf; \</span><br><span class="line"></span><br><span class="line">docker run -p 6376:6379 -p 16376:16379 --name redis-6 \</span><br><span class="line">-v /mydata/redis/node-6/data:/data \</span><br><span class="line">-v /mydata/redis/node-6/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.16 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建集群</span></span><br><span class="line">[root@zhenghaoyun /]# docker exec -it redis-1 /bin/sh</span><br><span class="line"></span><br><span class="line">/data # redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span></span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 172.38.0.15:6379 to 172.38.0.11:6379</span><br><span class="line">Adding replica 172.38.0.16:6379 to 172.38.0.12:6379</span><br><span class="line">Adding replica 172.38.0.14:6379 to 172.38.0.13:6379</span><br><span class="line">M: bc3aff4049d9610330f51b58871769f8ac827c63 172.38.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: 6af312198899e48ff01b1ee4a4158f7510e12d0b 172.38.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: c4f207bf3beb7ff1ac6142ab7b40166d57d34463 172.38.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: b2b335eb0306a36d23c9962b09f1ceed720200cc 172.38.0.14:6379</span><br><span class="line">   replicates c4f207bf3beb7ff1ac6142ab7b40166d57d34463</span><br><span class="line">S: c5bbf3ef339568f7d63000855d42ef366e52aba7 172.38.0.15:6379</span><br><span class="line">   replicates bc3aff4049d9610330f51b58871769f8ac827c63</span><br><span class="line">S: 5768864a0132bbc9139f16d1cf21b20868f66511 172.38.0.16:6379</span><br><span class="line">   replicates 6af312198899e48ff01b1ee4a4158f7510e12d0b</span><br><span class="line">Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Nodes configuration updated</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Assign a different config epoch to each node</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span></span><br><span class="line">Waiting for the cluster to join</span><br><span class="line">..</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing Cluster Check (using node 172.38.0.11:6379)</span></span><br><span class="line">M: bc3aff4049d9610330f51b58871769f8ac827c63 172.38.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 6af312198899e48ff01b1ee4a4158f7510e12d0b 172.38.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: b2b335eb0306a36d23c9962b09f1ceed720200cc 172.38.0.14:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates c4f207bf3beb7ff1ac6142ab7b40166d57d34463</span><br><span class="line">S: 5768864a0132bbc9139f16d1cf21b20868f66511 172.38.0.16:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 6af312198899e48ff01b1ee4a4158f7510e12d0b</span><br><span class="line">S: c5bbf3ef339568f7d63000855d42ef366e52aba7 172.38.0.15:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates bc3aff4049d9610330f51b58871769f8ac827c63</span><br><span class="line">M: c4f207bf3beb7ff1ac6142ab7b40166d57d34463 172.38.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check <span class="keyword">for</span> open slots...</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check slots coverage...</span></span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>

<p>至此redis集群就搭建完成了</p>
<h1 id="SpringBoot微服务打包成Docker镜像"><a href="#SpringBoot微服务打包成Docker镜像" class="headerlink" title="SpringBoot微服务打包成Docker镜像"></a>SpringBoot微服务打包成Docker镜像</h1><ol>
<li>构建springboot项目</li>
<li>打包应用</li>
<li>编写dockerfile</li>
<li>构建镜像</li>
<li>发布运行</li>
</ol>
<p>到这里我们就完全够用了Docker。</p>
<p>以后我们使用了Docker之后，给别人交付的就是一个镜像即可。</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>如果有很多镜像，100个镜像，分别启动和维护，非常麻烦，所以真正的企业实战还需要以下知识：</p>
<ul>
<li>Docker Compose</li>
<li>Docker Swarm</li>
<li>CI/CD Jenkins</li>
</ul>

        </div>

        
            <div class="post-copyright-info">
                <div class="article-copyright-info-container">
    <ul>
        <li>Post title：Docker一探究竟</li>
        <li>Post author：Hoven</li>
        <li>Create time：2020-05-30 11:55:20</li>
        <li>
            Post link：https://zhenghaoyun.cn/Docker/Docker一探究竟
        </li>
        <li>
            Copyright Notice：All articles in this blog are licensed under <a class="license" target="_blank" rel="noopener" href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh">BY-NC-SA</a> unless stating additionally.
        </li>
    </ul>
</div>

            </div>
        

        
            <div class="article-nav">
                
                    <div class="article-prev">
                        <a class="prev"
                           rel="prev"
                           href="/JVM/JVM%EF%BC%88%E4%B8%80%EF%BC%89%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87"
                        >
                            <span class="left arrow-icon flex-center">
                              <i class="fas fa-chevron-left"></i>
                            </span>
                            <span class="title flex-center">
                                <span class="post-nav-title-item">JVM（一）内存与垃圾回收篇</span>
                                <span class="post-nav-item">Prev posts</span>
                            </span>
                        </a>
                    </div>
                
                
                    <div class="article-next">
                        <a class="next"
                           rel="next"
                           href="/JUC/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20%5B%E5%85%A8%5D"
                        >
                            <span class="title flex-center">
                                <span class="post-nav-title-item">JUC并发编程学习笔记[全]</span>
                                <span class="post-nav-item">Next posts</span>
                            </span>
                            <span class="right arrow-icon flex-center">
                              <i class="fas fa-chevron-right"></i>
                            </span>
                        </a>
                    </div>
                
            </div>
        

        
            <div class="comment-container">
                <div class="comments-container">
    <div id="comment-anchor"></div>
    <div class="comment-area-title">
        <i class="fas fa-comments">&nbsp;Comments</i>
    </div>
    

        
            
    <div class="valine-container">
        <script 
                src="//cdn.jsdelivr.net/npm/valine@latest/dist/Valine.min.js"></script>
        <div id="vcomments"></div>
        <script >
            function loadValine() {
                new Valine({
                    el: '#vcomments',
                    appId: 'uffz9vWTIQhDc1YbAjAndspC-gzGzoHsz',
                    appKey: 'KQwbThRfP3cQIJYoLHMIqXLX',
                    meta: ['nick', 'mail', 'link'],
                    avatar: 'wavatar',
                    enableQQ: true,
                    placeholder: '',
                    lang: 'zh-Hans'.toLowerCase()
                });

                function getAuthor(language) {
                    switch (language) {
                        case 'en':
                            return 'Author';
                        case 'zh-CN':
                            return '博主';
                        default:
                            return 'Master';
                    }
                }

                // Add "Author" identify
                const getValineDomTimer = setInterval(() => {
                    const vcards = document.querySelectorAll('#vcomments .vcards .vcard');
                    if (vcards.length > 0) {
                        let author = 'Hoven';

                        if (author) {
                            for (let vcard of vcards) {
                                const vnick_dom = vcard.querySelector('.vhead .vnick');
                                const vnick = vnick_dom.innerHTML;
                                if (vnick === author) {
                                    vnick_dom.innerHTML = `${vnick} <span class="author">${getAuthor(KEEP.hexo_config.language)}</span>`
                                }
                            }
                        }
                        clearInterval(getValineDomTimer);
                    } else {
                        clearInterval(getValineDomTimer);
                    }
                }, 2000);
            }

            if ('false') {
                const loadValineTimeout = setTimeout(() => {
                    loadValine();
                    clearTimeout(loadValineTimeout);
                }, 1000);
            } else {
                window.addEventListener('DOMContentLoaded', loadValine);
            }
        </script>
    </div>



        
    
</div>

            </div>
        
    </div>
</div>


                
            </div>

        </div>

        <div class="page-main-content-bottom">
            <footer class="footer">
    <div class="info-container">
        <div class="copyright-info info-item">
            &copy;
            
              <span>2019</span>&nbsp;-&nbsp;
            
            2021&nbsp;<i class="fas fa-heart icon-animate"></i>&nbsp;<a href="/">Hoven</a>
        </div>
        
        <div class="theme-info info-item">
            Powered by <a target="_blank" href="https://hexo.io">Hexo</a>&nbsp;|&nbsp;Theme&nbsp;<a class="theme-version" target="_blank" href="https://github.com/XPoet/hexo-theme-keep">Keep v3.4.2</a>
        </div>
        
    </div>
</footer>

        </div>
    </div>

    
        <div class="post-tools">
            <div class="post-tools-container">
    <ul class="tools-list">
        <!-- TOC aside toggle -->
        
            <li class="tools-item page-aside-toggle">
                <i class="fas fa-outdent"></i>
            </li>
        

        <!-- go comment -->
        
            <li class="go-comment">
                <i class="fas fa-comment"></i>
            </li>
        
    </ul>
</div>

        </div>
    

    <div class="right-bottom-side-tools">
        <div class="side-tools-container">
    <ul class="side-tools-list">
        <li class="tools-item tool-font-adjust-plus flex-center">
            <i class="fas fa-search-plus"></i>
        </li>

        <li class="tools-item tool-font-adjust-minus flex-center">
            <i class="fas fa-search-minus"></i>
        </li>

        <li class="tools-item tool-expand-width flex-center">
            <i class="fas fa-arrows-alt-h"></i>
        </li>

        <li class="tools-item tool-dark-light-toggle flex-center">
            <i class="fas fa-moon"></i>
        </li>

        <!-- rss -->
        

        
            <li class="tools-item tool-scroll-to-top flex-center">
                <i class="fas fa-arrow-up"></i>
            </li>
        

        <li class="tools-item tool-scroll-to-bottom flex-center">
            <i class="fas fa-arrow-down"></i>
        </li>
    </ul>

    <ul class="exposed-tools-list">
        <li class="tools-item tool-toggle-show flex-center">
            <i class="fas fa-cog fa-spin"></i>
        </li>
        
    </ul>
</div>

    </div>

    
        <aside class="page-aside">
            <div class="post-toc-wrap">
    <div class="post-toc">
        <ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#Docker%E6%A6%82%E8%BF%B0"><span class="nav-text">Docker概述</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#Docker%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%87%BA%E7%8E%B0"><span class="nav-text">Docker为什么会出现?</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Docker%E5%8E%86%E5%8F%B2"><span class="nav-text">Docker历史</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Docker%E8%83%BD%E5%B9%B2%E5%98%9B"><span class="nav-text">Docker能干嘛</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF"><span class="nav-text">容器化技术</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#DevOps"><span class="nav-text">DevOps</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#Docker%E5%AE%89%E8%A3%85"><span class="nav-text">Docker安装</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#Docker%E6%9E%B6%E6%9E%84"><span class="nav-text">Docker架构</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#%E9%95%9C%E5%83%8F-image"><span class="nav-text">镜像(image):</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#%E5%AE%B9%E5%99%A8-container"><span class="nav-text">容器(container):</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#%E4%BB%93%E5%BA%93-repository"><span class="nav-text">仓库(repository):</span></a></li></ol></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%AE%89%E8%A3%85Docker"><span class="nav-text">安装Docker</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%E7%8E%AF%E5%A2%83%E6%9F%A5%E7%9C%8B"><span class="nav-text">环境查看</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%AE%89%E8%A3%85"><span class="nav-text">安装</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%8D%B8%E8%BD%BD"><span class="nav-text">卸载</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F"><span class="nav-text">阿里云镜像加速</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Docker-run%E6%B5%81%E7%A8%8B"><span class="nav-text">Docker run流程</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#Docker%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86"><span class="nav-text">Docker底层原理</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#Docker%E5%91%BD%E4%BB%A4"><span class="nav-text">Docker命令</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%B8%AE%E5%8A%A9%E5%91%BD%E4%BB%A4"><span class="nav-text">帮助命令</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E9%95%9C%E5%83%8F%E5%91%BD%E4%BB%A4"><span class="nav-text">镜像命令</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#docker-images%E6%9F%A5%E7%9C%8B%E6%9C%AC%E6%9C%BA%E6%89%80%E6%9C%89%E9%95%9C%E5%83%8F"><span class="nav-text">docker images查看本机所有镜像</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#docker-search%E6%90%9C%E7%B4%A2%E9%95%9C%E5%83%8F"><span class="nav-text">docker search搜索镜像</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#docker-pull%E4%B8%8B%E8%BD%BD%E9%95%9C%E5%83%8F"><span class="nav-text">docker pull下载镜像</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#docker-rmi%E5%88%A0%E9%99%A4%E9%95%9C%E5%83%8F"><span class="nav-text">docker rmi删除镜像</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4"><span class="nav-text">容器命令</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#docker-run%E6%96%B0%E5%BB%BA%E5%AE%B9%E5%99%A8%E5%B9%B6%E5%90%AF%E5%8A%A8"><span class="nav-text">docker run新建容器并启动</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#docker-ps%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%B9%E5%99%A8"><span class="nav-text">docker ps列出所有运行的容器</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E9%80%80%E5%87%BA%E5%AE%B9%E5%99%A8"><span class="nav-text">退出容器</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%88%A0%E9%99%A4%E5%AE%B9%E5%99%A8"><span class="nav-text">删除容器</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8%E5%92%8C%E5%81%9C%E6%AD%A2%E5%AE%B9%E5%99%A8"><span class="nav-text">启动容器和停止容器</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97"><span class="nav-text">查看日志</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E4%B8%AD%E8%BF%9B%E7%A8%8B%E4%BF%A1%E6%81%AF"><span class="nav-text">查看容器中进程信息</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E5%85%83%E6%95%B0%E6%8D%AE"><span class="nav-text">查看容器元数据</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E8%BF%9B%E5%85%A5%E5%BD%93%E5%89%8D%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%B9%E5%99%A8"><span class="nav-text">进入当前正在运行的容器</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E4%BB%8E%E5%AE%B9%E5%99%A8%E5%86%85%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%E5%88%B0%E4%B8%BB%E6%9C%BA%E4%B8%8A"><span class="nav-text">从容器内拷贝文件到主机上</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%B0%8F%E7%BB%93"><span class="nav-text">小结</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%BB%83%E4%B9%A0"><span class="nav-text">练习</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#docker%E5%AE%89%E8%A3%85nginx"><span class="nav-text">docker安装nginx</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#docker%E5%AE%89%E8%A3%85tomcat"><span class="nav-text">docker安装tomcat</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#docker%E5%AE%89%E8%A3%85ES-Kibana"><span class="nav-text">docker安装ES+Kibana</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#Docker%E5%8F%AF%E8%A7%86%E5%8C%96"><span class="nav-text">Docker可视化</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#Docker%E9%95%9C%E5%83%8F%E8%AF%A6%E8%A7%A3"><span class="nav-text">Docker镜像详解</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#%E9%95%9C%E5%83%8F%E6%98%AF%E4%BB%80%E4%B9%88"><span class="nav-text">镜像是什么</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Docker%E9%95%9C%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86"><span class="nav-text">Docker镜像加载原理</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%88%86%E5%B1%82%E7%90%86%E8%A7%A3"><span class="nav-text">分层理解</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E9%95%9C%E5%83%8F%E6%8F%90%E4%BA%A4"><span class="nav-text">镜像提交</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7"><span class="nav-text">容器数据卷</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7"><span class="nav-text">什么是容器数据卷</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7"><span class="nav-text">使用容器数据卷</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%AE%9E%E6%88%98%EF%BC%9A%E5%AE%89%E8%A3%85MySQL"><span class="nav-text">实战：安装MySQL</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%85%B7%E5%90%8D%E6%8C%82%E8%BD%BD%E5%92%8C%E5%8C%BF%E5%90%8D%E6%8C%82%E8%BD%BD"><span class="nav-text">具名挂载和匿名挂载</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%8C%BF%E5%90%8D%E6%8C%82%E8%BD%BD"><span class="nav-text">匿名挂载</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%85%B7%E5%90%8D%E6%8C%82%E8%BD%BD"><span class="nav-text">具名挂载</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%88%9D%E8%AF%86DockerFile"><span class="nav-text">初识DockerFile</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%AE%B9%E5%99%A8"><span class="nav-text">数据卷容器</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#DockerFile"><span class="nav-text">DockerFile</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#%E6%9E%84%E5%BB%BA%E6%AD%A5%E9%AA%A4"><span class="nav-text">构建步骤</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B"><span class="nav-text">构建过程</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E6%8C%87%E4%BB%A4"><span class="nav-text">指令</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4"><span class="nav-text">常用指令</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#CMD%E5%92%8CENTRYPOINT%E7%9A%84%E5%8C%BA%E5%88%AB"><span class="nav-text">CMD和ENTRYPOINT的区别</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%AE%9E%E6%88%98"><span class="nav-text">实战</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84centOS"><span class="nav-text">创建一个自己的centOS</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AAtomcat%E9%95%9C%E5%83%8F"><span class="nav-text">制作一个tomcat镜像</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84%E9%95%9C%E5%83%8F"><span class="nav-text">发布自己的镜像</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%8F%91%E5%B8%83%E5%88%B0DockerHub"><span class="nav-text">发布到DockerHub</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%8F%91%E5%B8%83%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F"><span class="nav-text">发布到阿里云镜像</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%B0%8F%E7%BB%93-1"><span class="nav-text">小结</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#Docker%E7%BD%91%E7%BB%9C"><span class="nav-text">Docker网络</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%90%86%E8%A7%A3Docker0"><span class="nav-text">理解Docker0</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%E7%BB%93%E8%AE%BA"><span class="nav-text">结论</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E2%80%93link"><span class="nav-text">–link</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%BB%9C"><span class="nav-text">自定义网络</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E7%BD%91%E8%B7%AF%E8%BF%9E%E9%80%9A"><span class="nav-text">网路连通</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%AE%9E%E6%88%98%EF%BC%9A%E9%83%A8%E7%BD%B2redis%E9%9B%86%E7%BE%A4"><span class="nav-text">实战：部署redis集群</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#SpringBoot%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%89%93%E5%8C%85%E6%88%90Docker%E9%95%9C%E5%83%8F"><span class="nav-text">SpringBoot微服务打包成Docker镜像</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#%E5%85%B6%E4%BB%96"><span class="nav-text">其他</span></a></li></ol>
    </div>
</div>
        </aside>
    

    <div class="image-viewer-container">
    <img src="">
</div>


    
        <div class="search-pop-overlay">
    <div class="popup search-popup">
        <div class="search-header">
          <span class="search-input-field-pre">
            <i class="fas fa-keyboard"></i>
          </span>
            <div class="search-input-container">
                <input autocomplete="off"
                       autocorrect="off"
                       autocapitalize="off"
                       placeholder="Search..."
                       spellcheck="false"
                       type="search"
                       class="search-input"
                >
            </div>
            <span class="popup-btn-close">
                <i class="fas fa-times"></i>
            </span>
        </div>
        <div id="search-result">
            <div id="no-result">
                <i class="fas fa-spinner fa-pulse fa-5x fa-fw"></i>
            </div>
        </div>
    </div>
</div>

    

</main>




<script src="/js/utils.js"></script>

<script src="/js/main.js"></script>

<script src="/js/header-shrink.js"></script>

<script src="/js/back2top.js"></script>

<script src="/js/dark-light-toggle.js"></script>



    
<script src="/js/local-search.js"></script>




    
<script src="/js/code-copy.js"></script>





<div class="post-scripts">
    
        
<script src="/js/left-side-toggle.js"></script>

<script src="/js/libs/anime.min.js"></script>

<script src="/js/toc.js"></script>

    
</div>



</body>
</html>
